===============================================================================
                        SECURITY LOCKDOWN GUIDE
===============================================================================

‚ö†Ô∏è  CRITICAL: Your GitHub repository is PUBLIC. This means anyone can view 
    your code, including any personal information or API keys you commit.

This guide provides step-by-step instructions to secure your repository and 
protect your sensitive information.

===============================================================================
IMMEDIATE SECURITY ACTIONS (DO THIS FIRST!)
===============================================================================

üö® STEP 1: AUDIT CURRENT EXPOSURE
Before making any changes, check what's already exposed:

1.1 CHECK GIT HISTORY FOR SECRETS
   Run these commands in your repository root:
   
   git log --oneline --all -p | grep -i "email\|key\|password\|secret\|token"
   git log --oneline --all -p | grep -E "[0-9a-zA-Z]{32,}"
   
   Look for:
   - Plain text email addresses (not Base64 encoded)
   - API keys (EmailJS, reCAPTCHA, etc.)
   - Passwords or tokens
   - Personal phone numbers or addresses

1.2 CHECK ALL FILES FOR EXPOSED DATA
   Search all files for sensitive information:
   
   grep -r "youremail@domain.com" .
   grep -r "your.*phone.*number" .
   grep -r "your_emailjs_key" .
   grep -r "your_recaptcha_key" .
   
   Replace with your actual email, phone, and any known API keys.

1.3 CHECK GITHUB REPOSITORY ONLINE
   - Go to your GitHub repository in a web browser
   - Use GitHub's search function to look for your email, phone, keys
   - Check recent commits for accidentally exposed data

===============================================================================
STEP 2: SECURE YOUR API KEYS
===============================================================================

2.1 UNDERSTAND KEY EXPOSURE LEVELS

   üü¢ SAFE FOR PUBLIC (Client-side keys - designed to be visible):
   - reCAPTCHA Site Keys (the public one, not secret key)
   - EmailJS Public Keys (designed for client-side use)
   - Mailchimp Form Action URLs (public by design)
   
   üü° ACCEPTABLE BUT SHOULD BE PROTECTED:
   - Base64 encoded email addresses (provides basic obfuscation)
   - EmailJS Service IDs (not critical but better protected)
   
   üî¥ NEVER EXPOSE (Server-side secrets):
   - reCAPTCHA Secret Keys (only needed server-side)
   - EmailJS Private Keys (if any)
   - Email passwords
   - Database credentials
   - Personal addresses and phone numbers in plain text

2.2 CURRENT KEY STATUS IN YOUR TEMPLATE

   EmailJS Public Key: "Rqgd3ar53ZPk9z4Nf"
   ‚îú‚îÄ‚îÄ Status: üü° ACCEPTABLE (designed for client-side)
   ‚îú‚îÄ‚îÄ Risk: Low - attackers can send emails using your quota
   ‚îú‚îÄ‚îÄ Mitigation: Monitor usage, set up alerts
   ‚îî‚îÄ‚îÄ Action: Consider rotating if concerned

   reCAPTCHA Site Key: "6LeoG4srAAAAAL..."
   ‚îú‚îÄ‚îÄ Status: üü¢ SAFE (designed to be public)
   ‚îú‚îÄ‚îÄ Risk: None - site keys are meant to be visible
   ‚îî‚îÄ‚îÄ Action: No action needed

   Admin Email: Base64 encoded
   ‚îú‚îÄ‚îÄ Status: üü° ACCEPTABLE (basic obfuscation)
   ‚îú‚îÄ‚îÄ Risk: Low - easily decoded but prevents casual scraping
   ‚îî‚îÄ‚îÄ Action: Keep encoded, consider server-side processing

2.3 ROTATE COMPROMISED KEYS (If Needed)

   If you've accidentally exposed sensitive keys:
   
   For EmailJS:
   a) Log into EmailJS dashboard
   b) Go to Account ‚Üí API Keys
   c) Generate new Public Key
   d) Update config.js with new key
   e) Delete old key
   
   For reCAPTCHA:
   a) Go to Google reCAPTCHA Admin Console
   b) Create new site with same domains
   c) Update config.js with new Site Key
   d) Delete old site if compromised

===============================================================================
STEP 3: CLEAN UP PERSONAL INFORMATION
===============================================================================

3.1 IDENTIFY PERSONAL DATA TO PROTECT

   Personal information to check for:
   - Email addresses (if in plain text - needs protection)
   - Phone numbers (if in plain text - needs protection)
   - Company information (public business info - generally OK)
   - Address: Any personal addresses (needs protection)
   - LinkedIn: Public profile links (OK)

3.2 SECURE PERSONAL INFORMATION

   Replace any plain text personal info in ALL files:
   
   # Find all instances of your email
   grep -r "dana@dje.ca" .
   
   # Find all instances of your phone
   grep -r "403.*617.*8305" .
   
   # Find any addresses
   grep -r -i "calgary\|alberta\|canada" .

3.3 USE PLACEHOLDER VALUES IN PUBLIC REPOSITORY

   Instead of real personal info, use placeholders in config.js:
   
   ‚ùå BAD:
   email: "youremail@domain.com"
   phone: "(555) 123-4567"
   
   ‚úÖ GOOD:
   email: "YOUR_EMAIL_HERE"
   phone: "YOUR_PHONE_HERE"
   
   Then users replace these with their own information.

===============================================================================
STEP 4: IMPLEMENT SECURE CONFIGURATION SYSTEM
===============================================================================

4.1 CREATE TEMPLATE CONFIG.JS

   Rename your current config.js to config.template.js:
   
   mv config.js config.template.js
   
   Replace all real values with placeholders:
   
   personal: {
       firstName: "YOUR_FIRST_NAME",
       lastName: "YOUR_LAST_NAME",
       email: "YOUR_EMAIL_HERE",
       phone: "YOUR_PHONE_HERE",
       company: "YOUR_COMPANY_NAME"
   },
   
   email: {
       emailjs: {
           serviceId: "YOUR_EMAILJS_SERVICE_ID",
           publicKey: "YOUR_EMAILJS_PUBLIC_KEY"
       },
       adminEmailEncoded: "BASE64_ENCODED_EMAIL_HERE"
   }

4.2 CREATE GITIGNORE FOR REAL CONFIG

   Create/update .gitignore file:
   
   echo "config.js" >> .gitignore
   echo "*.local.js" >> .gitignore
   echo ".env" >> .gitignore
   echo "secrets/" >> .gitignore

4.3 CREATE LOCAL CONFIG (NOT COMMITTED)

   Copy template for local development:
   
   cp config.template.js config.js
   
   Then edit config.js with your real values.
   This file will be ignored by Git.

===============================================================================
STEP 5: CLEAN GIT HISTORY (IF NEEDED)
===============================================================================

‚ö†Ô∏è  WARNING: This rewrites Git history. Only do this if you've confirmed 
    sensitive data is in your commit history.

5.1 IDENTIFY COMMITS WITH SENSITIVE DATA

   git log --oneline --all -p | grep -A5 -B5 "sensitive_data_here"

5.2 REMOVE SENSITIVE DATA FROM HISTORY

   Option A: Use git-filter-repo (recommended)
   
   # Install git-filter-repo
   pip install git-filter-repo
   
   # Remove specific file from all history
   git filter-repo --path config.js --invert-paths
   
   # Remove specific strings from all history
   git filter-repo --replace-text replacements.txt
   
   Where replacements.txt contains:
   youremail@domain.com==>YOUR_EMAIL_HERE
   (555) 123-4567==>YOUR_PHONE_HERE
   your_emailjs_key==>YOUR_EMAILJS_KEY

   Option B: Use BFG Repo-Cleaner
   
   # Download BFG from https://rtyley.github.io/bfg-repo-cleaner/
   java -jar bfg.jar --replace-text replacements.txt your-repo.git

5.3 FORCE PUSH CLEANED HISTORY

   ‚ö†Ô∏è  WARNING: This will overwrite your GitHub repository history!
   
   git push --force-with-lease origin main

===============================================================================
STEP 6: IMPLEMENT ADDITIONAL SECURITY MEASURES
===============================================================================

6.1 ENVIRONMENT-BASED CONFIGURATION

   Create different configs for different environments:
   
   config.development.js  (for localhost)
   config.production.js   (for live site)
   config.template.js     (for sharing/commits)

6.2 GITHUB SECRETS (For GitHub Actions)

   If using GitHub Actions:
   a) Go to Repository Settings ‚Üí Secrets and variables ‚Üí Actions
   b) Add secrets:
      - EMAILJS_SERVICE_ID
      - EMAILJS_PUBLIC_KEY
      - RECAPTCHA_SITE_KEY
   c) Reference in workflows: ${{ secrets.EMAILJS_SERVICE_ID }}

6.3 REPOSITORY SECURITY SETTINGS

   In GitHub repository settings:
   
   Security tab:
   ‚òëÔ∏è Enable vulnerability alerts
   ‚òëÔ∏è Enable automated security updates
   ‚òëÔ∏è Enable secret scanning (if available)
   
   General tab:
   ‚òëÔ∏è Restrict pushes that create secrets
   ‚òëÔ∏è Enable branch protection rules

===============================================================================
STEP 7: ONGOING SECURITY PRACTICES
===============================================================================

7.1 PRE-COMMIT CHECKLIST

   Before every commit, check:
   ‚ñ° No plain text personal information
   ‚ñ° No unencoded email addresses
   ‚ñ° No real phone numbers or addresses
   ‚ñ° Only template/placeholder values in committed files
   ‚ñ° All real configs are .gitignored

7.2 REGULAR SECURITY AUDITS

   Monthly security check:
   
   # Search for any accidentally committed secrets
   git log --oneline -p | grep -E "(email|phone|key|secret)"
   
   # Check current files
   grep -r "@" . --exclude-dir=.git
   grep -r "key.*=" . --exclude-dir=.git

7.3 MONITOR API KEY USAGE

   Set up monitoring for your API keys:
   
   EmailJS:
   - Check usage limits monthly
   - Set up email alerts for high usage
   - Monitor for unusual sending patterns
   
   reCAPTCHA:
   - Review site verification stats
   - Check for unexpected domains

===============================================================================
STEP 8: USER EDUCATION & DOCUMENTATION
===============================================================================

8.1 UPDATE README

   Add security notice to your README:
   
   ## üîí Security Notice
   
   This repository uses placeholder values for all personal information and API keys.
   Before using:
   
   1. Copy config.template.js to config.js
   2. Replace all placeholder values with your real credentials
   3. Never commit your real config.js file
   
   See security.txt for detailed security guidelines.

8.2 UPDATE SETUP WIZARD

   Modify setup-wizard.html to:
   - Warn users about not committing real credentials
   - Generate config.js files that aren't tracked by Git
   - Include security best practices in instructions

===============================================================================
QUICK SECURITY CHECKLIST
===============================================================================

üîç IMMEDIATE ACTIONS:
‚ñ° Audit current repository for exposed personal data
‚ñ° Check if sensitive keys are already public
‚ñ° Search Git history for accidentally committed secrets

üîß CONFIGURATION SECURITY:
‚ñ° Replace real values with placeholders in committed files
‚ñ° Create template config file for sharing
‚ñ° Add real config.js to .gitignore
‚ñ° Use Base64 encoding for email addresses

üõ°Ô∏è REPOSITORY SECURITY:
‚ñ° Enable GitHub security features
‚ñ° Set up secret scanning alerts
‚ñ° Implement branch protection rules
‚ñ° Regular security audits

üìö DOCUMENTATION:
‚ñ° Update README with security notices
‚ñ° Educate users about not committing secrets
‚ñ° Provide clear setup instructions

===============================================================================
RISK ASSESSMENT: YOUR CURRENT EXPOSURE
===============================================================================

Based on your current setup:

üü¢ LOW RISK:
- reCAPTCHA site keys (designed to be public)
- Business name and public LinkedIn profiles
- Base64 encoded email (basic obfuscation)

üü° MEDIUM RISK:
- EmailJS public keys (can consume your quota)
- Mailchimp form URLs (can add fake subscribers)

üî¥ HIGH RISK (If present):
- Plain text personal email or phone numbers
- Home addresses or personal information
- Any server-side API secrets

===============================================================================
RECOVERY PLAN (If Data Already Exposed)
===============================================================================

If sensitive data is already public:

1. IMMEDIATE DAMAGE CONTROL:
   - Rotate all API keys immediately
   - Change any exposed passwords
   - Monitor accounts for unusual activity

2. CLEAN UP EXPOSURE:
   - Remove data from current repository
   - Clean Git history if needed
   - Update any documentation that references old credentials

3. MONITOR AND ALERT:
   - Set up monitoring for API usage
   - Enable alerts for unusual activity
   - Regular security audits

4. PREVENT FUTURE EXPOSURE:
   - Implement the security practices in this guide
   - Train team members on secure practices
   - Use automated tools to prevent secret commits

===============================================================================

Remember: Security is an ongoing process, not a one-time setup. Regular audits 
and staying informed about best practices will keep your repository and 
personal information secure.

For questions or concerns about specific security issues, consult with a 
cybersecurity professional or refer to GitHub's security documentation.